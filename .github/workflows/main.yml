
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
  issue_comment:
    types: [created]

env:
  APP: legal-term-api
  VER: latest
  REG: trtestreg.azurecr.io
  AZ_TENANT: ec44ec06-9344-4a84-b3fe-8f38e070305e
  AZ_SUB: ed407654-54f5-428f-8e6d-d7d484c844fe
  AZ_RG: trtest
  AZ_CLUSTER: trtestaks

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Checkout PR associated with comment
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request != null
        run: |
          git branch --show-current
          gh pr checkout ${{ github.event.issue.number }}
          git branch --show-current
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Debug information - PR comment
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request != null
        run: |
          echo "IS_PR_COMMENT: ${{ github.event.issue.pull_request != null }}"
          echo "event.issue.number: ${{ toJSON(github.event.issue.number) }}"
          echo "event.issue.title: ${{ github.event.issue.title }}"
          echo "event action is ${{ github.event.action }}" # should be 'created' or 'edited' for PR comments
          echo "event repository is ${{ github.event.repository.name }}"
          echo "sender is ${{ github.event.sender.login }}"
          echo "***********************************"
        # echo '${{ toJSON(github.event) }}'

      - name: Conditional step - PR comment
        if: github.event_name == 'issue_comment' && github.event.issue.pull_request != null && github.event.action == 'created'
        run: |
          echo "This step runs only for newly created PR comments."
          echo "You can add your custom logic here."
          echo "The comment body is: ${{ github.event.comment.body }}"
          echo "The COMMENT_BODY is: ${{ env.COMMENT_BODY }}"
          if [[ $COMMENT_BODY =~ "^terraform (\w+) (\w+)" ]]; then
            ACTION="${BASH_REMATCH[1]}"
            ENV="${BASH_REMATCH[2]}"
            echo "ACTION=$ACTION" >> $GITHUB_ENV
            echo "ENV=$ENV" >> $GITHUB_ENV
          fi
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_NAME: ${{ github.event.repository.name }}
          SENDER: ${{ github.event.sender.login }}

      - name: Debug - use environment variables
        run: |
          echo "ACTION is ${{ env.ACTION }}"
          echo "ENV is ${{ env.ENV }}"
          
      - name: Debug information - PR open/update/reopen
        if: github.event_name == 'pull_request'
        run: |
          echo "IS_PR: ${{ github.event.pull_request != null }}"
          echo "event.action is ${{ github.event.action }}" # should be 'opened', 'synchronize', or 'reopened' for PRs
          echo "event number is ${{ github.event.number }}"
          echo "event repository is ${{ github.event.repository.name }}"
          echo "pr base branch is ${{ github.event.pull_request.base.ref }}"
          echo "pr head branch is ${{ github.event.pull_request.head.ref }}"
          echo "sender is ${{ github.event.sender.login }}"
          echo "***********************************"
        # echo '${{ toJSON(github.event) }}'

      - name: Conditional step - PR open/update/reopen
        if: github.event_name == 'pull_request' 
        run: |
          echo "This step runs only for newly opened, updated, or reopened PRs."
          echo "You can add your custom logic here."


      # - name: Get python
      #   uses: actions/setup-python@v5
      #   with:
      #     python-version: 3.11
      # - name: Get poetry
      #   uses: snok/install-poetry@v1
      # - name: Poetry install
      #   run: |
      #     poetry install --no-interaction --no-root
      # - name: Run tests
      #   run: |
      #     poetry run python -m pytest
      # - name: Build and push container
      #   env:
      #     REG_USER: ${{ secrets.REG_USER }}
      #     REG_PASS: ${{ secrets.REG_PASS }}
      #   run: |
      #     docker build --tag $REG/$APP:$VER .
      #     docker login -u ${REG_USER} -p ${REG_PASS} ${REG}
      #     docker push ${REG}/$APP:$VER
      # - name: Azure Login
      #   uses: azure/login@v2
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      # - uses: azure/use-kubelogin@v1
      #   with:
      #     kubelogin-version: 'v0.0.24'
      # - uses: azure/setup-kubectl@v3
      # - name: Deploy to Kubernetes
      #   run: |
      #     az account set --subscription $AZ_SUB
      #     az aks get-credentials --resource-group $AZ_RG --name $AZ_CLUSTER --overwrite-existing --admin
      #     kubectl get namespace ${APP} || kubectl create namespace ${APP}
      #     kubectl apply -f k8s/api-deployment.yaml -n ${APP}
      #     kubectl wait --for=condition=available --timeout=60s deployment/${APP} -n ${APP}
      #     kubectl apply -f k8s/api-service.yaml -n ${APP}
      #     kubectl apply -f k8s/api-ingressclass.yaml -n ${APP}
      #     kubectl apply -f k8s/api-ingress.yaml -n ${APP}
      #     kubectl apply -f k8s/api-hpa.yaml -n ${APP}
